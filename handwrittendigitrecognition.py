# -*- coding: utf-8 -*-
"""HandWrittenDigitRecognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12KjWjdUCvvhSRkTt_t7EL2uS8XRIUUI4
"""

#Import Libraries

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

#Import Dataset

(X_train,Y_train),(X_test,Y_test)=mnist.load_data()

type(X_train)

type(Y_train)

print(X_train.shape,Y_train.shape,X_test.shape,Y_test.shape)

#Training Data---->60000 images
#Test Data----->10000 images
#Image Dimension---->28 x 28
#Grayscale image---->1 colour channel

print(X_train[10])

print(X_train[10].shape)

#Print the image
plt.imshow(X_train[50])
plt.show()

#Print the label
print(Y_train[50])

#Image Labels

print(Y_train.shape,Y_test.shape)

#Unique Values in Y_train
print(np.unique(Y_train))


#Unique Values in Y_test
print(np.unique(Y_test))

#Normalize the data
X_train=keras.utils.normalize(X_train,axis=1)
X_test=keras.utils.normalize(X_test,axis=1)
plt.imshow(X_train[0],cmap=plt.cm.binary)

print(X_train[0])

#Resizing image to make it suitable for apply Convolution Operation

IMG_SIZE=28
X_train=np.array(X_train).reshape(-1,IMG_SIZE,IMG_SIZE,1)  #Increase one dimension for kernel operation
X_test=np.array(X_test).reshape(-1,IMG_SIZE,IMG_SIZE,1)  #Increase one dimension for kernel operation
print(X_train.shape,X_test.shape)

from keras.models import Sequential
from keras.layers import Dense,Conv2D,Dropout,Flatten,MaxPooling2D

#Create The CNN Model
model=Sequential()

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(128,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(keras.layers.Dense(128,activation='relu'))
model.add(keras.layers.Dropout(0.1))

model.add(keras.layers.Dense(64,activation='relu'))
model.add(keras.layers.Dropout(0.1))

model.add(keras.layers.Dense(10,activation='softmax'))

model.summary()

#Compile the Neural Network
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Training Phase

model.fit(X_train,Y_train,validation_split=0.2,epochs=10)

#Accuracy on Test Data

loss,accuracy=model.evaluate(X_test,Y_test)
print(loss)
print(accuracy)

print(X_test.shape)

#First image in Test Data

plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred=model.predict([X_test])

print(Y_pred.shape)

print(Y_pred[0])

#model.predict() gives prediction probability of each class for that data point

#Converting prediction probabilities to class label
label_for_first_image=np.argmax(Y_pred[0])
print(label_for_first_image)

#Converting prediction probabilities to class label for all test data points
Y_pred_labels=[np.argmax(i) for i in Y_pred]
print(Y_pred_labels)

#Y_test---->True labels
#Y_pred_labels---->Predicted labels

#Confusion Matrix

cm=confusion_matrix(Y_test,Y_pred_labels)

print(cm)

plt.figure(figsize=(15,7))
sns.heatmap(cm,annot=True,fmt='d',cmap='Reds')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

#Building Predictive System

input_image_path='/content/download.png'
input_image=cv2.imread(input_image_path)

type(input_image)

cv2_imshow(input_image)

input_image.shape

grayscale=cv2.cvtColor(input_image,cv2.COLOR_RGB2GRAY)

grayscale.shape

input_image_resized=cv2.resize(grayscale,(28,28),interpolation=cv2.INTER_AREA)

input_image_resized.shape

cv2_imshow(input_image_resized)

input_image_nom=keras.utils.normalize(input_image_resized,axis=1)

image_reshaped=np.array(input_image_nom).reshape(-1,IMG_SIZE,IMG_SIZE,1)

type(image_reshaped)

image_reshaped.shape

input_prediction=model.predict(image_reshaped)
print(input_prediction)

input_pred_label=np.argmax(input_prediction)
print(input_pred_label)

tf.keras.models.save_model(model,'Digit.hdf5')

